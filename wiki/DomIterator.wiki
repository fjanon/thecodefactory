Class that iterates through the DOM, returning elements that match a criteria defined in a matcher.

= Introduction =

The DomIterator works in conjunction with a com.codefactory.gwt.domiterator.client.IElementMatcher. The matcher checks if the element passed in matches the criteria that it defines.

A few matchers are predefined, but new customized ones are easily defined by implementing the IElementMatcher interface.

= Details =

DomIterator is an Iterator, not a List builder. When _next()_ is called, the code examines the DOM to find an element that fulfills the matcher criteria, as opposed to _com.google.gwt.dom.client.Document.getElementsByTagName_ which returns a _NodeList`<`Element`>`_.
The DomIterator uses very little memory since it doesn't build a list. It keeps track of the current element and searches incrementally.

 The predefined matchers provided are matching elements with:
 * a _single_ class name with case _sensitive_ comparison: _com.codefactory.gwt.domiterator.client.SingleClassnameCaseSensitiveMatcher_ .
 Use if you are looking for elements with a specific class name and want the comparison to be case sensitive.
 Elements can have multiple class names, the matcher can find any of the individual names in the _class_ attribute.
 For example if an element has an attribute _class='header first chapter'_,
 the single class name 'first' matcher will match 'first' and the DomIterator will include that element.

 * a _single_ class name with case _insensitive_ comparison: _com.codefactory.gwt.domiterator.client.SingleClassnameCaseInsensitiveMatcher_
 Same as above, except the comparison is case insensitive. For example if an element has an attribute {{{class='Header FIRST chaPTer'}}}, the single class name matcher will match any of the names 'header', 'first' or 'chapter'.

 * _multiple_ class names with case _sensitive_ comparison:  _com.codefactory.gwt.domiterator.client.MultiClassnameCaseSensitiveMatcher_
 The matcher "second fourth" would match an element with the class names "first second third fourth" but not an element with "first SECOND third fourth"

 * _multiple_ class names with case _insensitive_ comparison: _com.codefactory.gwt.domiterator.client.MultiClassnameCaseInsensitiveMatcher_
 The matcher "second fourth" would match an element with the class names "first second third fourth" or "first SECOND third fourth"

 * _regular expression_ applied on the element 'class' attribute: _com.codefactory.gwt.domiterator.client.ClassnameRegexMatcher_
 The matcher "second fourth" would match an element with the class names "first second third fourth" or "first SECOND third fourth"

 * _regular expression_ applied on the element 'id' attribute: _com.codefactory.gwt.domiterator.client.IdRegexMatcher_

The search starts with the DOM 'body' element by default when no start element is specified. The search is breadth first.

The DomIterator implements the _java.util.Iterator_ and the _java.lang.Iterable_ interfaces.
 It can be used in two ways: with an _java.util.Iterator_ or as an _java.lang.Iterable_ with a Java 5 'for' loop:
<pre>
// Different predefined matchers
IElementMatcher matcher = new SingleClassnameCaseSensitiveMatcher("theClassname");
or
IElementMatcher matcher = new SingleClassnameCaseInsensitiveMatcher("theClassname");
or
IElementMatcher matcher = new ClassnameRegexMatcher(regexp);
or
IElementMatcher matcher = new MultiClassnameCaseCensitiveMatcher("First Second");
or
IElementMatcher matcher = new MultiClassnameCaseInsensitiveMatcher("fIrsT seCond");
or
IElementMatcher matcher = new MultiClassnameCaseInsensitiveMatcher(new String[] {"first", "second"});

// Different DomIterator constructors:
DomIterator di = new DomIterator(matcher);	// start from the 'body' element
or
DomIterator di = new DomIterator(matcher, "startElementId"); // start from the element with this id
or
DomIterator di = new DomIterator(matcher, anElement);	// start from that element

// Use the DomIterator as an Iterator
Element element = null;
String ids = "";


while (di.hasNext())
   	{
   	 element = di.next();
   	 // Do something with the element with the classes "class1 class2"
   	 ids += element.getId();	// concatenate the ids without space
   	}

// Use the DomIterator as an Iterable (Java 5 and up)
for (Element element : new DomIterator(new SingleClassnameCaseSensitiveMatcher("theclassname"), "div6"))
   	{
   	 GWT.log("for in: " + element.getNodeName() + " " + element.getId(), null);
   	}
</pre>

Check the source code of any matcher as an example to implement your own matcher.

Performance:

Iteration through 2700 elements on a Duo Core 1.66Ghz laptop takes:
 * 4,600ms (4.6sec) in hosted mode
 * 87ms (yes, 87ms) in Firefox 3.0.4
 * 156ms in Internet Explorer 6 (IE6)

See the tests and examples in DomIteratorDemo.java.

There is no JUnit tests in the GWT project because the GWT/JUnit architecture doesn't pass an HTML page to the tests. The DOM structure would have to be built by program in the unit test setup, a bit time consuming for a 2700 element structure.